{"ast":null,"code":"import moment from 'moment';\nexport function getOffset(time) {\n  var midnight = moment(time).startOf('day');\n  return time.diff(midnight, 'm');\n}\nexport function getMoment(duration, numberOfUnits) {\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (duration * numberOfUnits + offset >= 24 * 60) {\n    return moment({\n      h: 23,\n      m: 59\n    });\n  }\n\n  return moment({\n    h: 0,\n    m: 0\n  }).add(duration * numberOfUnits + offset, 'm');\n}\nexport function getNumberOfCells(time, duration, isUpRound) {\n  var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var midnight = moment(time).startOf('day').add(offset, 'm');\n  var testTime = moment(time);\n\n  if (testTime.format('HH:mm') === '23:59') {\n    testTime.add(1, 'm');\n  }\n\n  var result = isUpRound ? Math.ceil(testTime.diff(midnight, 'm') / duration) : Math.floor(testTime.diff(midnight, 'm') / duration);\n\n  if (result < 0) {\n    return 0;\n  }\n\n  return result;\n}\nexport function getIntervalsByDuration(duration, startTime, endTime) {\n  var startIndex = getNumberOfCells(startTime, duration, false);\n  var endIndex = getNumberOfCells(endTime, duration, true);\n  var start = moment({\n    h: 0,\n    m: 0\n  }).add(duration * startIndex, 'm');\n  var end;\n  var result = [];\n\n  for (var i = startIndex; i < endIndex; i += 1) {\n    end = start.clone().add(duration, 'm');\n    var interval = {\n      start: start,\n      end: end\n    };\n    result.push(interval);\n    start = end;\n  }\n\n  var lastElement = result.pop();\n\n  if (lastElement.end.format('HH:mm') === '00:00') {\n    lastElement = {\n      start: lastElement.start,\n      end: moment({\n        hour: 23,\n        minute: 59\n      })\n    };\n  }\n\n  result.push(lastElement);\n  return result;\n}\nexport function getDayIntervals(day, scaleIntervals) {\n  return scaleIntervals.map(function (scaleInterval) {\n    var start = moment(day).hour(scaleInterval.start.hour()).minute(scaleInterval.start.minute()).second(0);\n    var end = moment(day).hour(scaleInterval.end.hour()).minute(scaleInterval.end.minute()).second(0);\n    return {\n      start: start,\n      end: end\n    };\n  });\n}\nexport function getIntervals(start, end) {\n  var diffDays = end.diff(start, 'days');\n  var result = [];\n\n  for (var i = 0; i <= diffDays; i += 1) {\n    var startInterval = moment(start).add(i, 'day');\n    var endInterval = moment(start).add(i, 'day').hour(end.hour()).minute(end.minute()).second(0);\n    result.push({\n      start: startInterval,\n      end: endInterval\n    });\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}