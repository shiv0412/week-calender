{"ast":null,"code":"import _extends from \"D:\\\\Additional\\\\week-calender\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/extends\";\nimport _classCallCheck from \"D:\\\\Additional\\\\week-calender\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Additional\\\\week-calender\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"D:\\\\Additional\\\\week-calender\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"D:\\\\Additional\\\\week-calender\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"D:\\\\Additional\\\\week-calender\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Additional\\\\week-calender\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"D:\\\\Additional\\\\week-calender\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport * as Utils from './Utils';\nimport CalendarHeader from './CalendarHeader';\nimport CalendarBody from './CalendarBody';\nimport ScaleColumn from './ScaleColumn';\nimport HeaderCell from './HeaderCell';\nimport DayCell from './DayCell';\nimport Event from './Event';\nimport Modal from './Modal';\nvar propTypes = {\n  firstDay: PropTypes.object,\n  // the first day in the caledar\n  numberOfDays: PropTypes.number,\n  scaleHeaderTitle: PropTypes.string,\n  headerCellComponent: PropTypes.func,\n  dayFormat: PropTypes.string,\n  // header day format\n  startTime: PropTypes.object,\n  // the start time of the scale and calendar\n  endTime: PropTypes.object,\n  // the end time of the scale and calendar\n  scaleUnit: PropTypes.number,\n  scaleFormat: PropTypes.string,\n  cellHeight: PropTypes.number,\n  dayCellComponent: PropTypes.func,\n  selectedIntervals: PropTypes.array,\n  onIntervalSelect: PropTypes.func,\n  onIntervalUpdate: PropTypes.func,\n  onIntervalRemove: PropTypes.func,\n  eventComponent: PropTypes.func,\n  onEventClick: PropTypes.func,\n  modalComponent: PropTypes.func,\n  useModal: PropTypes.bool,\n  eventSpacing: PropTypes.number\n};\nvar defaultProps = {\n  firstDay: moment(),\n  numberOfDays: 7,\n  scaleHeaderTitle: '',\n  headerCellComponent: HeaderCell,\n  dayFormat: 'dd., DD.MM',\n  startTime: moment({\n    h: 0,\n    m: 0\n  }),\n  endTime: moment({\n    h: 23,\n    m: 59\n  }),\n  scaleUnit: 15,\n  scaleFormat: 'HH:mm',\n  cellHeight: 25,\n  dayCellComponent: DayCell,\n  selectedIntervals: [],\n  eventComponent: Event,\n  modalComponent: Modal,\n  useModal: true,\n  eventSpacing: 15\n};\n\nvar WeekCalendar = /*#__PURE__*/function (_React$Component) {\n  _inherits(WeekCalendar, _React$Component);\n\n  var _super = _createSuper(WeekCalendar);\n\n  function WeekCalendar(props) {\n    var _this;\n\n    _classCallCheck(this, WeekCalendar);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"calculateColumnDimension\", function () {\n      var numberOfDays = _this.props.numberOfDays;\n      var columnDimensions = [];\n\n      for (var i = 0; i < numberOfDays; i += 1) {\n        var left = i === 0 ? 0 : columnDimensions[i - 1].left + columnDimensions[i - 1].width;\n        var columnWidth = 0;\n        var columnElement = document.querySelectorAll(\"[data-colpos='\".concat(i, \"']\"))[0];\n\n        if (columnElement) {\n          columnWidth = columnElement.getBoundingClientRect().width;\n        }\n\n        columnDimensions.push({\n          left: left,\n          width: columnWidth\n        });\n      }\n\n      _this.setState({\n        columnDimensions: columnDimensions\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleScroll\", function (e) {\n      _this.setState({\n        scrollPosition: {\n          top: e.target.scrollTop,\n          left: e.target.scrollLeft\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleCellMouseEnter\", function (col, row) {\n      if (_this.state.startSelectionPosition != null) {\n        _this.setState({\n          mousePosition: {\n            x: col,\n            y: row\n          }\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSelectionStart\", function (col, row) {\n      var startSelectionPosition = {\n        x: col,\n        y: row\n      };\n\n      _this.setState({\n        startSelectionPosition: startSelectionPosition,\n        mousePosition: startSelectionPosition\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSelectionStop\", function (e) {\n      if (e.button !== 0) {\n        return;\n      }\n\n      var _this$props = _this.props,\n          firstDay = _this$props.firstDay,\n          scaleUnit = _this$props.scaleUnit,\n          useModal = _this$props.useModal;\n      var _this$state = _this.state,\n          startSelectionPosition = _this$state.startSelectionPosition,\n          mousePosition = _this$state.mousePosition,\n          scaleIntervals = _this$state.scaleIntervals;\n\n      if (startSelectionPosition == null) {\n        return;\n      }\n\n      var endCol = mousePosition.x;\n      var endRow = mousePosition.y;\n      var minDayIndex = Math.min(startSelectionPosition.x, endCol);\n      var maxDayIndex = Math.max(startSelectionPosition.x, endCol);\n      var startDay = moment(firstDay).add(minDayIndex, 'days');\n      var endDay = moment(firstDay).add(maxDayIndex, 'days');\n      var minCellIndex = Math.min(startSelectionPosition.y, endRow);\n      var maxCellIndex = Math.max(startSelectionPosition.y, endRow) + 1;\n      var offsetTop = Utils.getOffset(scaleIntervals[0].start);\n      var startSelectionTime = Utils.getMoment(scaleUnit, minCellIndex, offsetTop);\n      var endSelectionTime = Utils.getMoment(scaleUnit, maxCellIndex, offsetTop);\n      var start = moment(startDay).hour(startSelectionTime.hour()).minute(startSelectionTime.minute()).second(0);\n      var end = moment(endDay).hour(endSelectionTime.hour()).minute(endSelectionTime.minute()).second(0);\n\n      if (useModal) {\n        var preselectedInterval = {\n          start: start,\n          end: end\n        };\n\n        _this.setState({\n          preselectedInterval: preselectedInterval,\n          updateEvent: false\n        });\n      } else {\n        var result = Utils.getIntervals(start, end);\n\n        if (_this.props.onIntervalSelect) {\n          _this.props.onIntervalSelect(result);\n        }\n      }\n\n      _this.setState({\n        startSelectionPosition: null,\n        mousePosition: null\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removePreselectedInterval\", function () {\n      var _this$state2 = _this.state,\n          preselectedInterval = _this$state2.preselectedInterval,\n          updateEvent = _this$state2.updateEvent;\n\n      if (updateEvent && _this.props.onIntervalRemove) {\n        _this.props.onIntervalRemove(preselectedInterval);\n      }\n\n      _this.setState({\n        preselectedInterval: null\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"submitPreselectedInterval\", function (newValue) {\n      var _this$state3 = _this.state,\n          preselectedInterval = _this$state3.preselectedInterval,\n          updateEvent = _this$state3.updateEvent;\n\n      if (updateEvent) {\n        if (_this.props.onIntervalUpdate) {\n          _this.props.onIntervalUpdate(_objectSpread(_objectSpread({}, preselectedInterval), newValue));\n        }\n      } else if (_this.props.onIntervalSelect) {\n        var intervals = Utils.getIntervals(preselectedInterval.start, preselectedInterval.end);\n        var result = intervals.map(function (interval) {\n          return _objectSpread(_objectSpread({}, interval), newValue);\n        });\n\n        _this.props.onIntervalSelect(result);\n      }\n\n      _this.setState({\n        preselectedInterval: null\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"closeModule\", function () {\n      _this.setState({\n        preselectedInterval: null\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEventClick\", function (oEvent) {\n      if (_this.props.onEventClick) {\n        _this.props.onEventClick(oEvent);\n      }\n\n      _this.setState({\n        preselectedInterval: oEvent,\n        updateEvent: true\n      });\n    });\n\n    var _scaleUnit = props.scaleUnit,\n        startTime = props.startTime,\n        endTime = props.endTime;\n\n    var _scaleIntervals = Utils.getIntervalsByDuration(_scaleUnit, startTime, endTime);\n\n    _this.state = {\n      scaleIntervals: _scaleIntervals,\n      columnDimensions: [],\n      scrollPosition: {\n        top: 0,\n        left: 0\n      },\n      startSelectionPosition: null,\n      preselectedInterval: null\n    };\n    return _this;\n  }\n\n  _createClass(WeekCalendar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.calculateColumnDimension();\n      window.addEventListener('resize', this.calculateColumnDimension);\n      window.addEventListener('mouseup', this.handleSelectionStop);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.scaleUnit !== this.props.scaleUnit || nextProps.startTime !== this.props.startTime || nextProps.endTime !== this.props.endTime) {\n        var scaleIntervals = Utils.getIntervalsByDuration(nextProps.scaleUnit, nextProps.startTime, nextProps.endTime);\n        this.setState({\n          scaleIntervals: scaleIntervals\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.calculateColumnDimension);\n      window.removeEventListener('mouseup', this.handleSelectionStop);\n    }\n  }, {\n    key: \"renderSelectedIntervals\",\n    value: function renderSelectedIntervals() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          firstDay = _this$props2.firstDay,\n          numberOfDays = _this$props2.numberOfDays,\n          cellHeight = _this$props2.cellHeight,\n          scaleUnit = _this$props2.scaleUnit,\n          selectedIntervals = _this$props2.selectedIntervals,\n          eventSpacing = _this$props2.eventSpacing;\n      var _this$state4 = this.state,\n          columnDimensions = _this$state4.columnDimensions,\n          scaleIntervals = _this$state4.scaleIntervals;\n      var result = [];\n\n      if (columnDimensions.length === 0 || selectedIntervals.length === 0) {\n        return result;\n      }\n\n      var EventComponent = this.props.eventComponent;\n      var offsetTop = Utils.getOffset(scaleIntervals[0].start);\n\n      var _loop = function _loop(dayIndex) {\n        var day = moment(firstDay).startOf('day').add(dayIndex, 'day');\n        var intervals = selectedIntervals.filter(function (interval) {\n          return interval.start.isSame(day, 'day') || interval.end.isSame(day, 'day');\n        });\n\n        if (intervals.length > 0) {\n          intervals.sort(function (i1, i2) {\n            return i1.start.diff(i2.start, 'minutes');\n          });\n          intervals.forEach(function (interval, index, array) {\n            var startY = 0;\n\n            if (!interval.start.isBefore(day)) {\n              startY = Utils.getNumberOfCells(interval.start, scaleUnit, false, offsetTop);\n            }\n\n            if (startY > scaleIntervals.length) {\n              return;\n            }\n\n            var beforeIntersectionNumber = array.filter(function (i, i1) {\n              return i1 < index && interval.start.isBefore(i.end);\n            }).length;\n            var afterIntersectionNumber = array.filter(function (i, i1) {\n              return i1 > index && interval.end.isAfter(i.start);\n            }).length;\n            var groupIntersection = beforeIntersectionNumber + afterIntersectionNumber + 1;\n            var endY = Utils.getNumberOfCells(interval.end, scaleUnit, true, offsetTop);\n\n            if (endY > scaleIntervals.length) {\n              endY = scaleIntervals.length;\n            }\n\n            var top = startY * cellHeight;\n            var width = (columnDimensions[dayIndex].width - eventSpacing) / groupIntersection; //TODO: dividing  by the GroupIntersection doesn't seem to work all that great...\n\n            var left = columnDimensions[dayIndex].left + (width + Math.floor(eventSpacing / groupIntersection)) * beforeIntersectionNumber;\n            var height = (endY - startY) * cellHeight;\n            var eventWrapperStyle = {\n              top: top,\n              left: left,\n              width: width,\n              height: height\n            };\n            var eventComponent = /*#__PURE__*/React.createElement(\"div\", {\n              className: \"weekCalendar__overlay\",\n              key: dayIndex * 20000 + index,\n              style: eventWrapperStyle,\n              onClick: _this2.handleEventClick.bind(_this2, interval)\n            }, /*#__PURE__*/React.createElement(EventComponent, interval));\n            result.push(eventComponent);\n          });\n        }\n      };\n\n      for (var dayIndex = 0; dayIndex < numberOfDays; dayIndex += 1) {\n        _loop(dayIndex);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"renderOverlay\",\n    value: function renderOverlay() {\n      if (this.state.startSelectionPosition != null) {\n        var startPosition = this.state.startSelectionPosition;\n        var mousePosition = this.state.mousePosition;\n        var top = Math.min(startPosition.y, mousePosition.y) * this.props.cellHeight;\n        var left = this.state.columnDimensions[Math.min(startPosition.x, mousePosition.x)].left;\n        var lastSelectedColumn = this.state.columnDimensions[Math.max(startPosition.x, mousePosition.x)];\n        var width = lastSelectedColumn.left - left + lastSelectedColumn.width;\n        var height = (Math.max(startPosition.y, mousePosition.y) + 1) * this.props.cellHeight - top;\n        var overlayStyle = {\n          top: top,\n          left: left,\n          width: width,\n          height: height\n        };\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"weekCalendar__overlay weekCalendar__overlay_status_selection\",\n          style: overlayStyle\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"renderModal\",\n    value: function renderModal() {\n      var useModal = this.props.useModal;\n      var preselectedInterval = this.state.preselectedInterval;\n\n      if (useModal && preselectedInterval) {\n        var ModalComponent = this.props.modalComponent;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"calendarModal\"\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"calendarModal__backdrop\",\n          onClick: this.closeModule\n        }), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"calendarModal__content\"\n        }, /*#__PURE__*/React.createElement(ModalComponent, _extends({}, preselectedInterval, {\n          onRemove: this.removePreselectedInterval,\n          onSave: this.submitPreselectedInterval\n        }))));\n      }\n\n      return null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          firstDay = _this$props3.firstDay,\n          numberOfDays = _this$props3.numberOfDays,\n          headerCellComponent = _this$props3.headerCellComponent,\n          dayFormat = _this$props3.dayFormat,\n          scaleUnit = _this$props3.scaleUnit,\n          scaleFormat = _this$props3.scaleFormat,\n          cellHeight = _this$props3.cellHeight,\n          dayCellComponent = _this$props3.dayCellComponent,\n          scaleHeaderTitle = _this$props3.scaleHeaderTitle;\n      var isSelection = this.state.startSelectionPosition != null;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: isSelection ? 'weekCalendar weekCalendar__status_selection' : 'weekCalendar'\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"weekCalendar__scaleHeader\"\n      }, /*#__PURE__*/React.createElement(\"span\", null, scaleHeaderTitle)), /*#__PURE__*/React.createElement(CalendarHeader, {\n        firstDay: firstDay,\n        numberOfDays: numberOfDays,\n        dayFormat: dayFormat,\n        columnDimensions: this.state.columnDimensions,\n        headerCellComponent: headerCellComponent\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"weekCalendar__scaleColumn\",\n        style: {\n          top: -this.state.scrollPosition.top\n        }\n      }, /*#__PURE__*/React.createElement(ScaleColumn, {\n        scaleUnit: this.props.scaleUnit,\n        scaleFormat: scaleFormat,\n        scaleIntervals: this.state.scaleIntervals,\n        cellHeight: this.props.cellHeight\n      })), /*#__PURE__*/React.createElement(CalendarBody, {\n        firstDay: firstDay,\n        numberOfDays: numberOfDays,\n        scaleUnit: scaleUnit,\n        scaleIntervals: this.state.scaleIntervals,\n        cellHeight: cellHeight,\n        dayCellComponent: dayCellComponent,\n        onSelectionStart: this.handleSelectionStart,\n        onCellMouseEnter: this.handleCellMouseEnter\n      }), this.renderSelectedIntervals(), this.renderOverlay(), this.renderModal());\n    }\n  }]);\n\n  return WeekCalendar;\n}(React.Component);\n\nWeekCalendar.propTypes = propTypes;\nWeekCalendar.defaultProps = defaultProps;\nexport default WeekCalendar;","map":null,"metadata":{},"sourceType":"module"}